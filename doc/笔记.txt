动态数据源：
TODO: ds1, ds2, ds3 能否动态加入进来，不用每次都改代码

TODO：看springboot工程目录实践


不同的Configuration类之间的引用：

JavaConfig与xml的对比：
JavaConfig对实际工作没什么明显优势：
xml类型不安全——这个劣势已经由IDE弥补了；
javaconfig更灵活——这个没价值，配置的地方本就不应该写逻辑，能写逻辑反而容易乱，不能写逻辑才好(xml)；
java程序员更习惯用java写配置——java程序员可能更熟悉xml配置
javaconfig不减少工作量；


打包：
按springboot的jar包：static, templates 都会打到classes下。如果用jsp的app启动，也访问不了jsp，但其它请求可以访问
按支持jsp的war包：注意，url根变成了war包名，而context-path不起作用了！


事务：
能支持事务，但用了@Transactional就无法切库（只能用默认数据源）。因为解释@Transactional时spring就要开事务，就要获取数据源，但等到自己切库后，spring并不会重新再获取一次数据源
也就是说，一旦进入@Transactional，再切库就没作用了，切库要在@Transactional外面进行。
那么，就要再定义一个方法并注解Transctional——但是同一个类内部调用的方法，不会被事务拦截器拦截到，所以这个方法必须放在另外一个类里，并注入进来。



【引入xml】
@Configuration
@ImportResource(locations={"classpath:application-bean.xml"})


【jsp】
SpringBoot 添加对JSP的支持（附常见坑点）
https://www.jianshu.com/p/de939365c472

【事务】
https://www.cnblogs.com/xingzc/p/6029483.html
SpringBoot 快速开启事务（附常见坑点）
https://www.jianshu.com/p/380a9d980ca5

【intercepter】
springboot过滤器和拦截器的实现和区别
https://segmentfault.com/a/1190000012072060

SpringBoot如何添加拦截器
https://blog.csdn.net/tracyclock/article/details/78672711

【filter】
springboot中filter的用法
https://www.cnblogs.com/ll409546297/p/7422833.html

【aop】
引入starter-aop即可使用，不需要其它配置。
Spring Boot +Spring AOP 可插拔式日志思路
https://blog.csdn.net/u010820702/article/details/62212981